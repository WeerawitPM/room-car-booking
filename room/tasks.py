import requests
from datetime import timedelta
from .models import Booking, Status
from django.utils import timezone  # ‡πÉ‡∏ä‡πâ timezone.now() ‡πÅ‡∏ó‡∏ô datetime.now()
from django.utils.timezone import localtime
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger


def start():
    scheduler = BackgroundScheduler()
    # scheduler.add_job(notify_upcoming_bookings, 'interval', minutes=10)
    trigger = CronTrigger(
        hour="7-17", minute="*/1"
    )  # Run every 10 minutes between 07:00 and 17:00
    scheduler.add_job(update_booking_status, trigger)
    scheduler.start()


def test():
    print("I love python {}".format(datetime.now()))


def notify_upcoming_bookings():
    # print("Notify Upcoming Bookings:", datetime.now())
    now = timezone.now()
    now_local = localtime(now)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
    upcoming_time = now_local + timedelta(minutes=30)

    print(f"Current local time: {now_local}, Upcoming time: {upcoming_time}")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    # b = Booking.objects.order_by("-id").first()
    # print(localtime(b.start_date), localtime(b.end_date))  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
    bookings = Booking.objects.filter(
        start_date__lte=upcoming_time,  # ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
        end_date__gte=now_local,  # ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        status__sequence=1,  # sequence 1 = Approved
        message=0,
    )

    for booking in bookings:
        local_start = localtime(booking.start_date)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
        local_end = localtime(booking.end_date)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        time_left = local_start - now_local
        hours_left, remainder = divmod(time_left.total_seconds(), 3600)
        minutes_left = remainder // 60

        title = ""
        confirm_url = f"http://192.168.20.16:8002/room/confirm_booking/{booking.id}"

        if now_local >= booking.start_date:
            title = f"\nüîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n"
            # print(title)
        else:
            title = (
                f"\nüîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏≠‡∏µ‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {minutes_left} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°\n"
            )
            # print(title)

        message = (
            f"{title}"
            f"‡∏´‡πâ‡∏≠‡∏á: {booking.room.name}\n"
            f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {booking.title}\n"
            f"‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: {booking.employee.first_name} {booking.employee.last_name}\n"
            f"‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {booking.description}\n"
            f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {booking.employee.tel}\n"
            f"‡πÄ‡∏£‡∏¥‡πà‡∏°: {local_start.strftime('%d/%m/%Y %H:%M')}\n"
            f"‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {local_end.strftime('%d/%m/%Y %H:%M')}\n"
            f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {booking.status.name}\n"
            f"\n‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°\n"
            f"{confirm_url}\n"
        )

        payload = {"message": message}
        line_notify_token = booking.employee.fccorp.line_notify_room
        line_notify_url = "https://notify-api.line.me/api/notify"
        headers = {"Authorization": f"Bearer {line_notify_token}"}
        response = requests.post(line_notify_url, headers=headers, data=payload)

        if response.status_code == 200:
            # If the notification is successfully sent, update the message status
            booking.message = 1
            booking.save()
        else:
            print(f"Failed to send Line notification for booking {booking.id}")


def update_booking_status():
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    now = timezone.now()

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bookings ‡∏ó‡∏µ‡πà‡∏°‡∏µ status__sequence ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1 ‡∏´‡∏£‡∏∑‡∏≠ 4 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ end_date ‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    bookings = Booking.objects.filter(
        status__sequence__in=[1, 4], end_date__lte=now - timedelta(hours=1)
    )

    print(f"Update Booking Status: {len(bookings)} bookings")

    # ‡∏î‡∏∂‡∏á status ‡∏ó‡∏µ‡πà‡∏°‡∏µ sequence ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Check-out
    check_out_status = Status.objects.get(sequence=5)
    remark = "‡∏ñ‡∏π‡∏Å Check-out ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö"

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡∏Ç‡∏≠‡∏á bookings ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    for booking in bookings:
        booking.status = check_out_status
        booking.remark = remark
        booking.check_out = now
        booking.save()
